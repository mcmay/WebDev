<script type="text/javascript">
	function findTheSenseText(partOfSpeechIndex, verbType, senseIndexNumber, senseIndexAlpha, senseSubindex) {
		// verbType 1 == transitive, 2 == intranstive, 0 == non-verb
		// 0 == senseIndexNumber not exist 'x' == senseIndexAlpha/senseSubindex not exist
		var sups = document.getElementsByTagName("SUP");
		var i, parentNode, targetNode, tableNode;
		var senseNode = {part_of_speech: '', senseText: ''};
		var tableElements;

		if (sups.length == 0) {
			tableElements = document.getElementsByTagName("TABLE");
			if (tableElements.length) {
				parentNode = tableElements[1].parentElement;
				senseNode.senseText = findSense(parentNode, verbType, senseIndexNumber, senseIndexAlpha, senseSubindex);
				senseNode.part_of_speech = getPartOfSpeech(verbType, tableNode, parentNode);
			}
			else
				console.log("Can't find <table> elements!");
		}
		else { // sups.length != 0
			
			for (i = 0; i < sups.length; i++) {
				if(sups[i].innerHTML == partOfSpeechIndex){
					parentNode = sups[i].parentElement; // get the parent node (whose sibling contains the senses of the entry) of targeted partOfSpeech
					break;
				}
			}	

			if (parentNode) {
				while(parentNode.tagName != "DIV") { // Go up skiping <span> until reaching the nearest DIV (beginning of the parent node)
					parentNode = parentNode.parentElement;
				}
				targetNode = parentNode.nextSibling.nextSibling; // Skip #text and get next DIV which contains the block of the target part of speech

				// get part of speech
				senseNode.part_of_speech = getPartOfSpeech(verbType, tableNode, targetNode);

				senseNode.senseText = findSense(targetNode, verbType, senseIndexNumber, senseIndexAlpha, senseSubindex);
			}
			else	{
				console.log("Can't find parentNode!");
			}
		}
		return senseNode;
	}

	function getPartOfSpeech (vType, tbNode, tNode) {
		var part_of_speech, posNode;


		if (vType == 0) {
			tbNode = tNode.firstChild.nextSibling; // skip #text and get <table> under target DIV
			posNode = tbNode.firstChild.nextSibling; // skip #text and get <tbody>
			posNode = posNode.firstChild.nextSibling; // skip #text and get <tr> for Pronunciation
			posNode = posNode.nextSibling.nextSibling; // skip #text and get <tr> contain Function and the actual part of speech
			posNode = posNode.firstChild.nextSibling; // skip #text and get the second child of <tr>: Function node itself
			posNode = posNode.nextSibling.nextSibling; // skip #text and get the <td> containing the actual part of speech
			posNode = posNode.firstChild;
			part_of_speech = posNode.innerHTML;
		}
		else {
			part_of_speech = "verb";
		}
		return part_of_speech;
	}

	function findSense (tNode, vType, sIndexNumber, sIndexAlpha, sSubindex) {
		var i = 0;
		var sText = '';

		if(tNode) {
			if(vType) {
				for (i = 0; i < tNode.childNodes.length; i++) { // Traverse through the childNodes of targeted DIV
					if (tNode.childNodes[i].innerHTML != undefined) { // skip #text
						if (vType === 1) { // transitive verb
							if (tNode.childNodes[i].innerHTML == 'transitive verb' &&
								tNode.childNodes[i].innerHTML != 'intranstive verb') {

								sText = procNode(tNode.childNodes[i], vType, sIndexNumber, sIndexAlpha, sSubindex);
								break;

							}	
						}
						else if (vType === 2) { // intransitive verb
							if (tNode.childNodes[i].innerHTML == 'intransitive verb') {
													
								sText = procNode(tNode.childNodes[i], vType, sIndexNumber, sIndexAlpha, sSubindex);
								break;
							}	
						}
					} // if immediately under for (...)	
				} //(for ( ...))
			}
			else { // if it is not a verb
				sText = procNode(tNode.childNodes[i], vType, sIndexNumber, sIndexAlpha, sSubindex);
			}

		}
		else {
			console.log("Can't find targetNode!");
		}
		return sText
	}
	function replaceChar (str, charToBeReplaced, replacement){
		var out = new String();
		var len = str.length;

		for (var i = 0; i < len; i++) {
			if (str[i] == charToBeReplaced)
				out = out.concat(replacement);
			else
				out = out.concat(str[i]);
		}
		return out;
	}

	function procNode(tNode, vbType, snsIdxNum, snsIdxAlpha, snsSubidx) {
		var subChildNode = tNode.nextSibling;
		var targetSense = '';
		var indexOfSepcSym;
		var subsenseIndexes = ["(1)", "(2)", "(3)", "(4)", "(5)", "(6)", "(7)", "(8)", "(9)", "(10)", "(11)", "(12)"];
		var i;

		while(subChildNode.innerHTML == undefined) { //Skip #text
			subChildNode = subChildNode.nextSibling;
			continue;
		}

		if (snsIdxNum != 0) {
			if (snsIdxAlpha == '~') { 
				subChildNode = findNode(subChildNode, snsIdxNum);

			} // no subsense under a numbered sense
			else if (snsIdxAlpha >= 'a' && snsIdxAlpha <= 'z') { // subsense labeled 'a', like '1 a', etc.
				
				if(snsSubidx == '~') {
					snsIdxNum = snsIdxNum + ' ' + 'a';
					subChildNode = findNode(subChildNode, snsIdxNum);
					subChildNode = getSubsenseNode(subChildNode, snsIdxAlpha, 'a');
				}
				else {
					for (i = 0; i < subsenseIndexes.length; i++) {
						if (snsSubidx == subsenseIndexes[i]) // check snsSubidx exists or not
							break;
					}
					if (i === subsenseIndexes.length)
						alert("Wrong subsense index entered!");
					else {
						snsIdxNum = snsIdxNum + ' ' + 'a' + ' ' + '(1)';
						subChildNode = findNode(subChildNode, snsIdxNum);
						subChildNode = getSubsenseNode(subChildNode, snsSubidx, '(1)');
					}
				}
			}
			else {
				alert("Wrong sense index letter entered!");
			}
		}
		else { // snsIdxNum == 0
			if(vbType == 1 || vbType == 2)
				subChildNode = subChildNode.nextSibling; 
			else
				subChildNode = subChildNode.nextSibling.nextSibling;
			// subChildNode on the right of the = sign is the <table> node
			// subChildNode on the left side of the = sign is <b>: </b>, <br> skipped
			
			if(subChildNode.innerHTML == ': '){
				subChildNode = subChildNode.nextSibling;
			}
		}
		while(subChildNode && subChildNode.tagName != "BR" && subChildNode.tagName != "/DIV")
		{
			if(subChildNode.tagName == "B") { // to filter cases where there comes a bold-typed colon in the sense
				if(subChildNode.innerHTML >= 'a' && subChildNode.innerHTML <= 'z'){
					break; // if the innerHTML in the bold element is a letter, 
				}
				var found = false;
				for (var i = 0; i < subsenseIndexes.length; i++) {
					if (subChildNode.innerHTML == subsenseIndexes[i]) {
						found = true;
						break;
					}
				}
				if(found)
					break;
			} // then next sense reached (hence the end of the needed sense)
			targetSense = targetSense + subChildNode.textContent + ' ';
			subChildNode = subChildNode.nextSibling; 
		}
		indexOfSepcSym = targetSense.indexOf('<');
		if (indexOfSepcSym >= 0) {
			targetSense = replaceChar (targetSense, '<', '&lt;');
		}
		indexOfSepcSym = targetSense.indexOf('>');
		if (indexOfSepcSym >= 0) {
			targetSense = replaceChar (targetSense, '>', '&gt;');
		}

		return targetSense;
	}

	function getSubsenseNode (ssNode, index, subIndexFirst) {
		if (index != subIndexFirst) {
			while (ssNode.innerHTML != index){
				ssNode = ssNode.nextSibling;
			} // get <b>snsIdxAlpha</b>
			while(ssNode.innerHTML != ": ") {
				ssNode = ssNode.nextSibling; // get rid of <b>: </b>
			}
			ssNode = ssNode.nextSibling; // reach sense text
		}
		return ssNode;
	}

	function findNode (nodeToFind, snsIdxNum) {
		while (nodeToFind.innerHTML != snsIdxNum) {

			nodeToFind = nodeToFind.nextSibling; // find sense number node
		}
		nodeToFind = nodeToFind.nextSibling; // skip #text
		nodeToFind = nodeToFind.nextSibling;

		if(nodeToFind.tagName != 'I') { 
			// Before the bold colon of some words, there is an italicized element
			// In that case, the italicized element is reserved with the colon
			while (nodeToFind.innerHTML != ': ')
				nodeToFind = nodeToFind.nextSibling; // skip #text and ": "
			if(nodeToFind.innerHTML == ': '){
				nodeToFind = nodeToFind.nextSibling; 	
			}
		}
		
		return nodeToFind;
	}
	
	function fileNameInterpreter () {
		var fileNameProps = {
			p_o_s:    	0,
			vb_t: 	  	0, 
			s_i_n: 		0,
			s_i_a:  	'~',
			s_s_i: 		'~',
			entryWord:  '',
			frequ: 		1
		};
		var fileName = prompt("Enter the file name:");
		var prefix = '';
		var i;

		if (fileName) {
			
			if (inRange(fileName[0], '1', '9')) { // NOTE: 9 is assumed to be the greatest but it may not be in actuality
				fileNameProps.p_o_s = fileName[0];
				prefix += fileName[0];
				if (fileName[1] == '_' && (fileName[2] == 't' || fileName[2] == 'i')) {
					if (fileName[2] == 't')
						fileNameProps.vb_t = 1;
					if (fileName[2] == 'i')
						fileNameProps.vb_t = 2;

					prefix += fileName[1];
					prefix += fileName[2];
					prefix += fileName[3]; // the last _ of a prefix e.g. 1_t_entry
				}
			}
			if ((fileName[0] == 't' || fileName[0] == 'i') && fileName[1] == '_') {
				if (fileName[0] == 't')
					fileNameProps.vb_t = 1;
				if (fileName[0] == 'i')
					fileNameProps.vb_t = 2;
				prefix += fileName[0];
				prefix += fileName[1];
			}
			if ((inRange(fileName[0], 'A', 'Z') || inRange(fileName[0], 'a', 'z')) && fileName[1] != '_') {
				fileNameProps.p_o_s = 0;
				fileNameProps.vb_t = 0;
			} 

			// get entryWord
			i = prefix.length; // starting from the first letter of the entry word
			while (i < fileName.length) {
				if (fileName[i] == '_' || inRange(fileName[i], '1', '9')) // Assume 9 is the greatest subsense index number
					break;
				fileNameProps.entryWord += fileName[i];
				i++;
			}

			if (inRange(fileName[fileName.length-1], 'A', 'Z') || inRange(fileName[fileName.length-1], 'a', 'z')) {
				if(inRange(fileName[fileName.length-2], '1', '9')) { // e.g. cat2a
					fileNameProps.s_i_a = fileName[fileName.length-1];
					fileNameProps.s_i_n = fileName[fileName.length-2]; // Assume 9 is the greatest subsense index number
				}
				if(fileName[fileName.length-2] == '_')
					fileNameProps.s_i_a = fileName[fileName.length-1];
			}
			if (fileName[fileName.length-1] == ')') { //e.g. 1a(1)
				fileNameProps.s_s_i += fileName[fileName.length-1];
				fileNameProps.s_s_i += fileName[fileName.length-2];
				fileNameProps.s_s_i += fileName[fileName.length-3];
				fileNameProps.s_i_a = fileName[fileName.length-4];
				fileNameProps.s_i_n = fileName[fileName.length-5]; // Assume 9 is the greatest subsense index number
			}
			if (inRange(fileName[fileName.length-1], '1', '9')) { 
				if (fileName[fileName.length-2] == '_') {
					fileNameProps.frequ = fileName[fileName.length-1];
					if ((inRange(fileName[fileName.length-3], 'A', 'Z') || inRange(fileName[fileName.length-3], 'a', 'z')) 
						&& inRange(fileName[fileName.length-4], '1', '9')) {// e.g. cat1a_2
						fileNameProps.s_i_a = fileName[fileName.length-3];
						fileNameProps.s_i_n = fileName[fileName.length-4]; // Assume 9 is the greatest subsense index number
					}
					if (fileName[fileName.length-3] == ')') { // e.g. cat1a(3)_2
						fileNameProps.s_s_i += fileName[fileName.length-3];
						fileNameProps.s_s_i += fileName[fileName.length-4];
						fileNameProps.s_s_i += fileName[fileName.length-5];
					}
				}
				else // e.g. cat1
					fileNameProps.s_i_n = fileName[fileName.length-1]; // Assume 9 is the greatest subsense index number
			}
			if ((inRange(fileName[fileName.length-1], 'A', 'Z') || inRange(fileName[fileName.length-1], 'a', 'z')) && 
				(inRange(fileName[fileName.length-2], 'A', 'Z') || inRange(fileName[fileName.length-2], 'a', 'z'))) {
				// e.g. wombat (no suffix at all!)
				fileNameProps.s_i_a = '~';
				fileNameProps.s_s_i = '~';
			}
		}
		return fileNameProps;
	}

	function inRange (fNameSuffix, start, end) {
		return (fNameSuffix >= start && fNameSuffix <= end)
	}

	function printEntry() {
		// findTheSenseText(partOfSpeechIndex, verbType, senseIndexNumber, senseIndexAlpha, senseSubindex);
		var parameters = fileNameInterpreter();
		if (parameters == null) {
			alert("No parameters received! Bye!");
			return;
		}
		
		var wordSense = findTheSenseText(parameters.p_o_s, parameters.vb_t, parameters.s_i_n, parameters.s_i_a, parameters.s_s_i);
		var senseString = "<div id=wordArea><p id=word>"; 
		var prePos = ' <i>';
		var postPos = '.</i></p><p id=sense>';
		var exampleHead = "</p><p>e.g. ";
		var examplePerSe = prompt("Enter the example:");
		var frequReport = "</p>You've met this word ";
		var tail = " times</p></div>";
		var body = document.getElementsByTagName("body");

		if (wordSense.part_of_speech == "verb") {
			if (parameters.vb_t == 1) {
				wordSense.part_of_speech = "vt";
			}
			if (parameters.vb_t == 2) {
				wordSense.part_of_speech = "vi";
			}
		}
		senseString = senseString + parameters.entryWord + prePos +  wordSense.part_of_speech + postPos 
		              + wordSense.senseText + exampleHead + examplePerSe + frequReport + parameters.frequ + tail;
		// senseString = head + senseString + word.innerHTML + "</p>" + example + tail;
		body[0].innerHTML = senseString;
	}
	printEntry();
</script>